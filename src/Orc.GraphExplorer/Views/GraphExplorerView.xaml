<catel:UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"  
             xmlns:models="clr-namespace:Orc.GraphExplorer.Models"  
             xmlns:local="clr-namespace:Orc.GraphExplorer"
             xmlns:catel="http://catel.codeplex.com"
             xmlns:controls="clr-namespace:GraphX.Controls;assembly=GraphX.Controls"
             xmlns:views="clr-namespace:Orc.FilterBuilder.Views;assembly=Orc.FilterBuilder"
             xmlns:converters="clr-namespace:GraphX.Converters;assembly=GraphX.Controls"
             xmlns:toolkit="clr-namespace:Orc.Toolkit;assembly=Orc.Toolkit"
             xmlns:domainModel="clr-namespace:Orc.GraphExplorer.DomainModel"
             xmlns:views1="clr-namespace:Orc.GraphExplorer.Views"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ViewModels="clr-namespace:Orc.GraphExplorer.ViewModels" x:Class="Orc.GraphExplorer.Views.GraphExplorerView" 
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300">

    <catel:UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="..\Style\ThemedGraphXTemplates.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <catel:BooleanToHidingVisibilityConverter x:Key="BooleanToHidingVisibilityConverter"/>
            <converters:DoubleToLog10Converter x:Key="log10Converter" />
            <converters:EqualityToBooleanConverter x:Key="equalityConverter" />
        </ResourceDictionary>
    </catel:UserControl.Resources>

    <catel:UserControl.DataContext>
        <ViewModels:GraphExplorerViewModel/>
    </catel:UserControl.DataContext>

    <Grid x:Name="root">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TabControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <TabItem  x:Name="overrallTab" FontWeight="Bold" IsSelected="{Binding IsOverallTabSelected}">
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="8,0,8,0" FontWeight="Bold" Text="Overrall" VerticalAlignment="Center"/>
                        <TextBlock Text=" *" x:Name="changeIndicator" Visibility="{Binding HasChange, Converter={StaticResource BooleanToHidingVisibilityConverter}}" VerticalAlignment="Center"/>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Margin="0" Height="32" Background="{StaticResource ScrollViewBackground}" BorderThickness="1" BorderBrush="{StaticResource NormalBorderBrush}">
                        <DockPanel>
                            <Button DockPanel.Dock="Left" Visibility="Collapsed" ToolTip="Save Layout To Xml"  Height="28" Width="28"
								Style="{StaticResource SaveButtonStyle}" Command="{Binding SaveToXml}"/>
                            <Button DockPanel.Dock="Left" Visibility="Collapsed" Height="28" Width="28" ToolTip="Load Layout From Xml"
								Style="{StaticResource LoadButtonStyle}" Command="{Binding LoadFromXml}"/>
                            <Button DockPanel.Dock="Left" Height="28" Width="28" ToolTip="Save As Image"
								Style="{StaticResource ExportButtonStyle}" Command="{Binding SaveToImage}"/>

                            <Rectangle DockPanel.Dock="Left" Fill="{StaticResource NormalBorderBrush}" Width="1" VerticalAlignment="Stretch" Margin="4"/>
                            <ToggleButton DockPanel.Dock="Left" Style="{StaticResource DragToggleButtonStyle}" IsChecked="{Binding CanDrag, Mode=TwoWay}" Height="28" Width="28" ToolTip="Enable Drag" />
                            <ToggleButton DockPanel.Dock="Left" Style="{StaticResource EditToggleButtonStyle}" IsChecked="{Binding IsInEditing}" Height="28" Width="28" ToolTip="Enable Edit Mode" Command="{Binding CanEditCommand}"/>
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Left"
								Visibility="{Binding IsInEditing, Converter={StaticResource BoolToVisibilityConverter}}">
                                <ToggleButton Height="28" DockPanel.Dock="Left" ToolTip="Create Link"
									IsChecked="{Binding IsAddingNewEdge}" Width="28" Style="{StaticResource AddLinkToggleButtonStyle}" Command="{Binding CreateLinkCommand}"/>
                                <Button Height="28" DockPanel.Dock="Left" ToolTip="Drag To Treate Node"
									Width="28" Style="{StaticResource VertexButtonStyle}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="PreviewMouseLeftButtonDown">
                                            <catel:EventToCommand Command="{Binding StartDragNodeCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Button>
                                <Button Height="28" DockPanel.Dock="Left" ToolTip="Undo"
									Command="{Binding UndoCommand}" Width="28" Style="{StaticResource UndoButtonStyle}"/>
                                <Button Height="28" DockPanel.Dock="Left" ToolTip="Redo"
									Command="{Binding RedoCommand}" Width="28" Style="{StaticResource RedoButtonStyle}"/>
                                <Button Height="28" DockPanel.Dock="Left" ToolTip="Save Changes To Data Source"
									Width="28" Style="{StaticResource SaveButtonStyle}" Command="{Binding SaveChangesCommand}"/>
                            </StackPanel>
                            <Rectangle  DockPanel.Dock="Left" Fill="{StaticResource NormalBorderBrush}" Width="1" VerticalAlignment="Stretch" Margin="4"/>
                            <Button DockPanel.Dock="Left" Height="28" ToolTip="Refresh Graph" Width="28"
								Style="{StaticResource RefershButtonStyle}" Command="{Binding RefreshCommand}"/>
                            <Rectangle DockPanel.Dock="Left" Fill="{StaticResource NormalBorderBrush}" Width="1" VerticalAlignment="Stretch" Margin="4"/>
                            <Slider DockPanel.Dock="Left" Style="{StaticResource SliderStyle}" Width="100"
								Minimum="{Binding MinZoom, Converter={StaticResource log10Converter}}"
								Maximum="{Binding MaxZoom, Converter={StaticResource log10Converter}}"
								Value="{Binding Zoom, Converter={StaticResource log10Converter}, Mode=TwoWay}"
								VerticalAlignment="Center"
								Ticks="0.1, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2"
								AutoToolTipPlacement="BottomRight"
								AutoToolTipPrecision="1"
								TickPlacement="None"
								TickFrequency="1"
								LargeChange="0.2"
								SmallChange="0.1"
								Orientation="Horizontal" />
                            <TextBlock DockPanel.Dock="Left" Foreground="{StaticResource AccentBrush}" Width="30" Text="{Binding Zoom, StringFormat=\{0:P0\}}" FontSize="10" FontWeight="Normal" VerticalAlignment="Center" Margin="2"/>
                            <ToggleButton DockPanel.Dock="Left" Margin="1" Style="{StaticResource ToggleButtonStyle}" Width="28" Content="Fill" IsChecked="{Binding ZoomMode, ConverterParameter={x:Static controls:ZoomControlModes.Fill}, Converter={StaticResource equalityConverter}}" />
                            <ToggleButton DockPanel.Dock="Left" Margin="1" Style="{StaticResource ToggleButtonStyle}" Width="28" Content="1:1" IsChecked="{Binding ZoomMode, ConverterParameter={x:Static controls:ZoomControlModes.Original}, Converter={StaticResource equalityConverter}}" />
                            <Rectangle  DockPanel.Dock="Left" Fill="{StaticResource NormalBorderBrush}" Width="1" VerticalAlignment="Stretch" Margin="4"/>
                            <toolkit:DropDownButton Visibility="Visible" ToolTip="Filter" Style="{StaticResource FilterButtonStyle}" HorizontalAlignment="Left" DockPanel.Dock="Left" Height="28" Width="28">
                                <StackPanel Height="200" Width="320">
                                    <views:FilterBuilderControl Margin="2,2,6,2" RawCollection="{Binding Entities}" FilteredCollection="{Binding FilteredEntities}"/>
                                    <CheckBox Margin="6" IsChecked="{Binding IsHideVertexes, Mode=TwoWay}" Content="Hide vertexes been filtered"/>
                                    <Button HorizontalAlignment="Left" VerticalAlignment="Top" Content="Clear" Command="{Binding ClearFilterCommand}" Height="24" Width="80" Margin="6"/>
                                </StackPanel>
                            </toolkit:DropDownButton>
                            <StackPanel Visibility="Collapsed" DockPanel.Dock="Right" HorizontalAlignment="Right" Orientation="Horizontal">
                                <TextBox Width="120" VerticalContentAlignment="Center" Height="22" Text="{Binding FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <ToggleButton Margin="1" Height="24" Width="24" Style="{StaticResource FilterToggleButtonStyle}" ToolTip="Apply Filter" IsChecked="{Binding IsFilterApplied}"/>
                            </StackPanel>
                        </DockPanel>
                    </Border>

                    <controls:ZoomControl x:Name="zoomctrl" AllowDrop="True" MinZoom="{Binding MinZoom}" MaxZoom="{Binding MaxZoom}" ZoomDeltaMultiplier="20" Grid.Row="1"
                                          Zoom="{Binding Zoom, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                          Mode="{Binding ZoomMode, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseMove">
                                <catel:EventToCommand Command="{Binding DragEdgeCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewDrop">
                                <catel:EventToCommand Command="{Binding DropEdgeCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                            <i:EventTrigger EventName="DragEnter">
                                <catel:EventToCommand Command="{Binding DropEnterCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <domainModel:GraphArea x:Name="Area" LogicCore="{Binding Path=DataContext.Logic, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="VertexDoubleClick">
                                    <catel:EventToCommand Command="{Binding NavigateCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="EdgeSelected">
                                    <catel:EventToCommand Command="{Binding EdgeSelectedCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="VertexSelected">
                                    <catel:EventToCommand Command="{Binding VertexSelectedCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="GenerateGraphFinished">
                                    <catel:EventToCommand Command="{Binding RelayoutAreaFinishedCommand}" DisableAssociatedObjectOnCannotExecute="False" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>                            
                        </domainModel:GraphArea>
                    </controls:ZoomControl>
                </Grid>
            </TabItem>
            <TabItem Visibility="{Binding IsNavTabVisible, Converter={StaticResource BooleanToHidingVisibilityConverter}}" IsSelected="{Binding IsNavTabSelected}" Padding="1" FontWeight="Bold">
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="8,0,0,0" FontWeight="Bold" Text="Navigate" VerticalAlignment="Center"/>
                        <StackPanel Orientation="Horizontal">
                            <Button Height="20" Foreground="{Binding Foreground, ElementName=navTab}" Width="20"
                                    Style="{StaticResource CloseButtonStyle}" Command="{Binding CloseNavTabCommand}"/>
                        </StackPanel>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border Margin="0" Background="{StaticResource ScrollViewBackground}" BorderThickness="1" BorderBrush="{StaticResource NormalBorderBrush}">
                        <StackPanel Orientation="Horizontal" Height="32">
                            <Button Height="28" Width="28"
                                    Style="{StaticResource ExportButtonStyle}" Command="{Binding SaveNavToImage}"/>
                            <Rectangle Fill="{StaticResource NormalBorderBrush}" Width="1" VerticalAlignment="Stretch" Margin="4"/>
                            <Slider Style="{StaticResource SliderStyle}" Width="100"
								Minimum="{Binding MinZoomNav, Converter={StaticResource log10Converter}}"
								Maximum="{Binding MaxZoomNav, Converter={StaticResource log10Converter}}"
								Value="{Binding ZoomNav, Converter={StaticResource log10Converter}, Mode=TwoWay}"
								VerticalAlignment="Center"
								Ticks="0.1, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2"
								AutoToolTipPlacement="BottomRight"
								AutoToolTipPrecision="1"
								TickPlacement="None"
								TickFrequency="1"
								LargeChange="0.2"
								SmallChange="0.1"
								Orientation="Horizontal" />
                            <TextBlock FontSize="10" Foreground="{StaticResource AccentBrush}" Width="30" Text="{Binding Zoom, ElementName=zoomctrlNav, StringFormat=\{0:P0\}}" FontWeight="Normal" VerticalAlignment="Center" Margin="2"/>
                            <ToggleButton Margin="1" Width="28" Style="{StaticResource ToggleButtonStyle}" Content="Fill" IsChecked="{Binding ZoomModeNav, ConverterParameter={x:Static controls:ZoomControlModes.Fill}, Converter={StaticResource equalityConverter}}" />
                            <ToggleButton Margin="1" Width="28" Style="{StaticResource ToggleButtonStyle}" Content="1:1" IsChecked="{Binding ZoomModeNav, ConverterParameter={x:Static controls:ZoomControlModes.Original}, Converter={StaticResource equalityConverter}}" />
                        </StackPanel>
                    </Border>
                    <controls:ZoomControl Grid.Row="1"  MinZoom="{Binding MinZoomNav}" MaxZoom="{Binding MaxZoomNav}" ZoomDeltaMultiplier="20" x:Name="zoomctrlNav"
                                          Zoom="{Binding ZoomNav, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                          Mode="{Binding ZoomModeNav, BindsDirectlyToSource=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                        <domainModel:GraphArea x:Name="AreaNav" LogicCore="{Binding Path=DataContext.NavLogic, Mode=OneWay, RelativeSource={RelativeSource AncestorType=Grid}}" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="VertexDoubleClick">
                                    <catel:EventToCommand Command="{Binding FurtherNavigateCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="GenerateGraphFinished">
                                    <catel:EventToCommand Command="{Binding RelayoutAreaNavFinishedCommand}" DisableAssociatedObjectOnCannotExecute="False" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </domainModel:GraphArea>
                    </controls:ZoomControl>
                </Grid>
            </TabItem>
        </TabControl>

        <!--~2~the menu bar@2@-->

        <Button Height="22" Width="22" Margin="2,1" VerticalAlignment="Top" HorizontalAlignment="Right" Style="{StaticResource SettingButtonStyle}" ToolTip="Open Setting"
                Command ="{Binding OpenSettingsCommand}"/>
        <Border x:Name="StatusBar" Grid.Row="1" Background="{DynamicResource StatusBar.Backround}">
            <StackPanel Orientation="Horizontal" Margin="6,2">
                <Image />
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Foreground="White" Text="{Binding StatusMessage, Mode=OneWay}"/>
            </StackPanel>
        </Border>
        <views1:SettingView Grid.RowSpan="3" Visibility="{Binding IsSettingsVisible, Mode=TwoWay, Converter={StaticResource BooleanToHidingVisibilityConverter}}" Margin="-1" >
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SettingApplied">
                    <catel:EventToCommand Command="{Binding SettingAppliedCommand}" DisableAssociatedObjectOnCannotExecute="False" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </views1:SettingView>
    </Grid>
</catel:UserControl>
